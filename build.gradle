plugins {
    id "com.github.hierynomus.license" version "0.12.1"
}
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'c'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

mainClassName = "de.qabel.desktop.DesktopClient"
version = hasProperty('release') ? release : 'dev'
new File('dist/resources/version').write version.toString()
def platform = "${System.properties['os.name'].toLowerCase()}_${System.properties['os.arch']}"

repositories {
    mavenCentral()
    jcenter()
    flatDir {
        dir 'libs'
    }
}

sourceSets {
	main {
		resources {
			srcDirs = ["src/main/resources", "dist/resources"]
		}
	}
    guiTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-gui/java')
        }
        resources.srcDir file('src/test-gui/resources')
    }
}

configurations {
    guiTestCompile.extendsFrom testCompile
    guiTestRuntime.extendsFrom testRuntime
    compile {
        description = 'compile classpath'
        transitive = true
    }
    runtime {
        extendsFrom compile
    }
}

startScripts {
    classpath += configurations.compile
    doLast{
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-Djava.library.path=\\\$APP_HOME/lib/"')
    }
}

jar.doFirst{
	manifest {
		attributes 'Implementation-Title': 'Qabel Desktop', 'Implementation-Version': version
		attributes 'Main-Class': 'de.qabel.desktop.DesktopClient'
	    attributes 'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
	}
}

dependencies {
    testCompile 'junit:junit:4.+'
    testCompile group: 'org.meanbean', name: 'meanbean', version: '2.+'
    testCompile 'org.testfx:testfx-core:4.+'
    testCompile 'org.testfx:testfx-junit:4.+'

    compile 'org.ocpsoft.prettytime:prettytime:3.2.7.Final' //Apache License https://github.com/ocpsoft/prettytime/blob/master/LICENSE
    compile 'commons-cli:commons-cli:1.2'                   //Apache License
    compile 'commons-codec:commons-codec:1.10'              //Apache License
    compile 'org.apache.httpcomponents:httpclient:4.5.+'    //Apache License
    compile 'org.apache.httpcomponents:httpmime:4.5.+'      //Apache License
    compile 'org.json:json:20090211'                        //None? https://github.com/stleary/JSON-java
    compile 'javax.inject:javax.inject:1'                   //Apache License http://mvnrepository.com/artifact/javax.inject/javax.inject/1
    compile name: 'afterburner'                             //Apache License https://github.com/AdamBien/afterburner.fx
    // see https://github.com/AdamBien/afterburner.fx/pull/54 //compile 'com.airhacks:afterburner.fx:1.6.2' // Apache 2.0

    compile name: 'qabel-core-0.1'

    compile 'com.google.code.gson:gson:2.+'                 //Apache License https://github.com/google/gson/blob/master/LICENSE
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'    //MIT http://www.slf4j.org/license.html
    compile group: 'log4j', name:'log4j', version: '1.2.16';            //Apache License https://logging.apache.org/log4j/1.2/license.html
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.4'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.4'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.4'
    compile group: 'org.apache.james', name: 'apache-mime4j', version: '0.7.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.+'

    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.7'  //Apache License https://bitbucket.org/xerial/sqlite-jdbc
    compile 'com.madgag.spongycastle:prov:1.53.0.0'                     //Bounty Castle License http://www.bouncycastle.org/licence.html

    compile 'com.github.zafarkhaja:java-semver:0.9.0'       // MIT https://github.com/zafarkhaja/jsemver/blob/master/LICENSE
}

task copyToLib(type: Copy) {
  	from configurations.runtime
    into "$buildDir/libs"
}

classes {
	 doLast {
        copyToLib.execute()
    }
}

task guiTest(type: Test) {
    testClassesDir = sourceSets.guiTest.output.classesDir
    classpath = sourceSets.guiTest.runtimeClasspath
    outputs.upToDateWhen { false }
}
check.dependsOn guiTest
guiTest.mustRunAfter test

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

tasks.withType(Test) {
    systemProperty "java.library.path", "libs/"

    reports.html.destination = file("${reporting.baseDir}/${name}")
}
run {
    systemProperty "java.library.path", "libs/"
}


task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Qabel Desktop', 'Implementation-Version': version
        attributes 'Main-Class': 'de.qabel.desktop.DesktopClient'
        attributes 'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
    }

    baseName = project.name + '-all-' + platform
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

}
distZip() {
    baseName = project.name + '-' + platform

    from (configurations.compile) {
        into baseName + '-' + version + '/lib/'
    }
    from ("libs/") {
        into baseName + '-' + version + '/lib/'
    }
}

downloadLicenses {
    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')
    ext.bsd = license('BSD License', 'http://www.opensource.org/licenses/bsd-license.php')
    includeProjectDependencies = true

    aliases = [
            (apacheTwo) : ['Apache 2.0', 'The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')],
            (bsd) : ['BSD', license('New BSD License', 'http://www.opensource.org/licenses/bsd-license.php')]
    ]

    licenses = [
            'org.ocpsoft.prettytime:prettytime:3.2.7.Final' : apacheTwo,
            ':afterburner:' : apacheTwo
    ]

    excludeDependencies = [
            ':qabel-core-0.1:'
    ]

    dependencyConfiguration = 'compile'
}
